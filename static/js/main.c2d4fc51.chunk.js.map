{"version":3,"sources":["Images/Icons/tornado.svg","Images/Icons/search.svg","Images/Icons sync /^/.*/.svg$","Images/Icons/clear.svg","Images/Icons/clouds.svg","Images/Icons/drizzle.svg","Images/Icons/rain.svg","Images/Icons/snow.svg","Images/Icons/storm.svg","Images/Icons/thunderstorm.svg","Components/Weather.js","Components/WeatherForm.js","Components/Navigation.js","Components/Forecast.js","Components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Weather","props","state","time","this","getTime","interval","setInterval","process","cityTime","lat","lon","fetch","then","response","json","data","setState","formatted","catch","error","console","log","clearInterval","className","Container","fluid","Row","Col","city","country","format","xs","md","main","src","require","alt","toLowerCase","Math","floor","temperature","description","highestTemp","wind","sunrise","lowestTemp","humidity","sunset","React","Component","WeatherForm","Form","onSubmit","loadWeather","Control","type","name","placeholder","Navigation","Forecast","forecastData","item","key","dt","theme","dt_txt","weather","icon","temp","MainPage","getWeather","a","target","elements","value","weatherApiKey","forecast","preventDefault","Promise","all","res1","res2","ok","statusText","data1","data2","Date","sys","toLocaleTimeString","slice","temp_max","temp_min","clouds","speed","coord","load","list","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,iGCA3C,IAAIC,EAAM,CACT,cAAe,GACf,eAAgB,GAChB,gBAAiB,GACjB,aAAc,GACd,eAAgB,GAChB,aAAc,GACd,cAAe,GACf,qBAAsB,GACtB,gBAAiB,IAIlB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBN,EAAOC,QAAUE,EACjBA,EAAeE,GAAK,I,mBC9BpBL,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,oNC6H5Bc,E,kDAvHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAHS,E,gEAOE,IAAD,OAClBC,KAAKC,UACLD,KAAKE,SAAWC,aAAY,WAC1B,EAAKF,YACJ,O,uJAGgBG,eACbC,E,2DADaD,e,wCAC4FJ,KAAKH,MAAMS,I,gBAAWN,KAAKH,MAAMU,KAE/IC,MAAMH,GACJI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZd,KAAMa,EAAKE,eAGdC,OAAM,SAACC,GACNC,QAAQC,IAAIF,M,mJAIhBG,cAAcnB,KAAKE,Y,+BAInB,OACE,yBAAKkB,UAAU,gBACb,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKJ,UAAU,gBACb,wBAAIA,UAAU,aACXpB,KAAKH,MAAM4B,KADd,KACsBzB,KAAKH,MAAM6B,SAEjC,wBAAIN,UAAU,WACZ,kBAAC,IAAD,CAAQO,OAAO,eAAe3B,KAAKF,MAAMC,MACzC,qCACA,kBAAC,IAAD,CAAQ4B,OAAO,UAAU3B,KAAKF,MAAMC,UAK5C,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKI,GAAI,GAAKC,GAAI,GAChB,yBAAKT,UAAU,qBACb,yBAAKA,UAAU,gBACQ,SAApBpB,KAAKH,MAAMiC,MACU,UAApB9B,KAAKH,MAAMiC,MACS,SAApB9B,KAAKH,MAAMiC,MACS,SAApB9B,KAAKH,MAAMiC,MACS,QAApB9B,KAAKH,MAAMiC,MACS,SAApB9B,KAAKH,MAAMiC,MACS,QAApB9B,KAAKH,MAAMiC,MACS,WAApB9B,KAAKH,MAAMiC,MACS,YAApB9B,KAAKH,MAAMiC,KACT,yBACE5C,GAAG,eACH6C,IAAKC,EAAQ,IACbC,IAAKjC,KAAKH,MAAMiC,OAGlB,yBACE5C,GAAG,eACH6C,IAAKC,MAAQ,YAAmBhC,KAAKH,MAAMiC,KAAKI,cAApC,SACZD,IAAKjC,KAAKH,MAAMiC,QAMxB,yBAAKV,UAAU,aACb,wBAAIA,UAAU,eAAee,KAAKC,MAAMpC,KAAKH,MAAMwC,aAAnD,QACA,wBAAIjB,UAAU,sBAAsBpB,KAAKH,MAAMyC,gBAIrD,kBAACd,EAAA,EAAD,CAAKI,GAAI,GAAKC,GAAI,GAChB,yBAAKT,UAAW,uBAAgBpB,KAAKH,MAAMiC,MAAS,MAClD,yBAAKV,UAAU,gBACb,wBAAIA,UAAU,QAAQe,KAAKC,MAAMpC,KAAKH,MAAM0C,aAA5C,QACA,0BAAMnB,UAAU,YAAhB,SAEF,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,QAAd,IAAuBpB,KAAKH,MAAM2C,KAAlC,OACA,0BAAMpB,UAAU,YAAhB,SAEF,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,QAAQpB,KAAKH,MAAM4C,SACjC,0BAAMrB,UAAU,YAAhB,YAEF,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,QAAQe,KAAKC,MAAMpC,KAAKH,MAAM6C,YAA5C,QACA,0BAAMtB,UAAU,YAAhB,QAEF,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,QAAQpB,KAAKH,MAAM8C,SAAjC,KACA,0BAAMvB,UAAU,YAAhB,UAEF,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,QAAQpB,KAAKH,MAAM+C,QACjC,0BAAMxB,UAAU,YAAhB,oB,GA7GIyB,IAAMC,W,QCabC,E,uKAdX,OACE,yBAAK3B,UAAU,eACb,kBAAC4B,EAAA,EAAD,CAAMC,SAAUjD,KAAKH,MAAMqD,aACzB,0BAAM9B,UAAU,aAAY,yBAAKlC,GAAG,SAClC6C,IAAKC,EAAQ,IACbC,IAAI,iBAEN,kBAACe,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOC,KAAK,OAAOC,YAAY,qB,GATlCR,aCUXS,EAVI,WACjB,OACM,yBAAKnC,UAAU,cACb,yBAAKA,UAAU,SAASlC,GAAG,cACzB,0BAAMkC,UAAU,wBAAhB,kBCkBGoC,E,uKArBD,IAAD,OACL,OACI,yBAAKpC,UAAU,gBACVpB,KAAKH,MAAM4D,aAAa1E,KAAI,SAAC2E,GAAD,OACzB,yBAAKC,IAAKD,EAAKE,GAAIxC,UAAW,sBAAe,EAAKvB,MAAMgE,OAAQ,MAC5D,6BACI,uBAAGzC,UAAU,WACT,kBAAC,IAAD,CAAQO,OAAO,QAAQ+B,EAAKI,QAC5B,6BACA,kBAAC,IAAD,CAAQnC,OAAO,SAAS+B,EAAKI,SAEjC,yBAAK/B,IAAG,2CAAsC2B,EAAKK,QAAQ,GAAGC,KAAtD,QAAkE9E,GAAG,gBAAiB+C,IAAKyB,EAAKK,QAAQ,GAAGjC,OAAO,6BAC1H,wBAAIV,UAAU,gBAAgBe,KAAKC,MAAMsB,EAAK5B,KAAKmC,MAAnD,kB,GAbLnB,aCuIRoB,E,kDA/Hb,WAAYrE,GAAQ,IAAD,8BACjB,cAAMA,IAuBRsE,WAxBmB,uCAwBN,WAAO7E,GAAP,qBAAA8E,EAAA,sDACLf,EAAO/D,EAAE+E,OAAOC,SAAS7C,KAAK8C,MAC9BC,EAAgBpE,mCACtBa,QAAQC,IAAIsD,GACNT,EAJK,4DAI0DV,EAJ1D,kBAIwEmB,EAJxE,iBAKLC,EALK,6DAK4DpB,EAL5D,kBAK0EmB,EAL1E,iBAOXlF,EAAEoF,iBACFC,QAAQC,IAAI,CAACpE,MAAMuD,GAASvD,MAAMiE,KAC/BhE,MAAK,YAAmB,IAAD,mBAAhBoE,EAAgB,KAAVC,EAAU,KACtB,GAAID,EAAKE,IAAMD,EAAKC,GAClB,OAAOJ,QAAQC,IAAI,CAACC,EAAKlE,OAAQmE,EAAKnE,SAExC,MAAMpB,MAAMsF,EAAKG,WAAYF,EAAKE,eAEnCvE,MAAK,YAAqB,IAAD,mBAAlBwE,EAAkB,KAAXC,EAAW,KAClBtC,EAAS,IAAIuC,KAAwB,IAAnBF,EAAMG,IAAIxC,QAC/ByC,qBACAC,MAAM,EAAG,GACN7C,EAAU,IAAI0C,KAAyB,IAApBF,EAAMG,IAAI3C,SAChC4C,qBACAC,MAAM,EAAG,GACZ,EAAKzE,SAAS,CACZY,KAAMwD,EAAM5B,KACZ3B,QAASuD,EAAMG,IAAI1D,QACnBY,YAAa2C,EAAMlB,QAAQ,GAAGzB,YAC9BR,KAAMmD,EAAMlB,QAAQ,GAAGjC,KACvBkC,KAAKiB,EAAMlB,QAAQ,GAAGC,KACtBC,KAAMgB,EAAMnD,KAAKmC,KACjB1B,YAAa0C,EAAMnD,KAAKyD,SACxB7C,WAAYuC,EAAMnD,KAAK0D,SACvB/C,UACAG,SACA6C,OAAQR,EAAMQ,OAAOb,IACrBjC,SAAUsC,EAAMnD,KAAKa,SACrBH,KAAMyC,EAAMzC,KAAKkD,MACjBnF,IAAK0E,EAAMU,MAAMpF,IACjBD,IAAK2E,EAAMU,MAAMrF,IACjBsF,MAAM,EACN5E,OAAO,EACPyC,aAAayB,EAAMW,UAGtB9E,OAAM,SAACC,GACNC,QAAQC,IAAI,4CACZ,EAAKL,SAAS,CACZG,OAAO,EACP4E,MAAM,EACN9D,KAAM,aAhDD,2CAxBM,sDAEjB,EAAKhC,MAAQ,CACX2B,KAAM,GACNC,QAAS,GACTY,YAAa,GACbR,KAAM,QACNmC,KAAM,GACN1B,YAAa,GACbG,WAAY,GACZD,QAAS,GACTG,OAAQ,GACR6C,OAAQ,GACR9C,SAAU,GACVH,KAAM,GACNlC,IAAK,GACLC,IAAK,GACLyD,KAAK,GACL4B,MAAM,EACN5E,OAAO,EACPyC,aAAa,IApBE,E,qDA6EjB,OACE,kBAACpC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKJ,UAAS,0BAAqBpB,KAAKF,MAAMgC,OAC5C,kBAAC,EAAD,MACA,yBAAKV,UAAU,WACf,kBAAC,EAAD,CAAa8B,YAAalD,KAAKmE,aAC9BnE,KAAKF,MAAM8F,KACV5F,KAAKF,MAAMkB,MACT,yBAAKI,UAAU,gBACb,wBAAIA,UAAU,YAAd,qEAIA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEK,KAAMzB,KAAKF,MAAM2B,KACjBC,QAAS1B,KAAKF,MAAM4B,QACpBY,YAAatC,KAAKF,MAAMwC,YACxBR,KAAM9B,KAAKF,MAAMgC,KACjBO,YAAarC,KAAKF,MAAMmE,KACxB1B,YAAavC,KAAKF,MAAMyC,YACxBG,WAAY1C,KAAKF,MAAM4C,WACvBD,QAASzC,KAAKF,MAAM2C,QACpBG,OAAQ5C,KAAKF,MAAM8C,OACnB6C,OAAQzF,KAAKF,MAAM2F,OACnB9C,SAAU3C,KAAKF,MAAM6C,SACrBH,KAAMxC,KAAKF,MAAM0C,KACjBjC,IAAKP,KAAKF,MAAMS,IAChBD,IAAKN,KAAKF,MAAMQ,IAChBU,MAAOhB,KAAKF,MAAMkB,MAClBgD,KAAMhE,KAAKF,MAAMkE,OAEnB,kBAAC,EAAD,CAAUP,aAAczD,KAAKF,MAAM2D,aAAcI,MAAO7D,KAAKF,MAAMgC,QAKzE9B,KAAKF,MAAMkB,e,GArHJ8B,aCcRgD,E,uKAhBX,OACE,yBAAK1E,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE2E,KAAK,IACLC,OAAK,EACLC,UAAW/B,W,GATPrB,IAAMC,WCOJoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEdhG,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMgG,c","file":"static/js/main.c2d4fc51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tornado.b3cf14c3.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.f59b0276.svg\";","var map = {\n\t\"./clear.svg\": 45,\n\t\"./clouds.svg\": 46,\n\t\"./drizzle.svg\": 47,\n\t\"./rain.svg\": 48,\n\t\"./search.svg\": 28,\n\t\"./snow.svg\": 49,\n\t\"./storm.svg\": 50,\n\t\"./thunderstorm.svg\": 51,\n\t\"./tornado.svg\": 27\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 44;","module.exports = __webpack_public_path__ + \"static/media/clear.ef790a4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.b40129ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.91b1ceb9.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.4ce8407e.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.5831cc74.svg\";","module.exports = __webpack_public_path__ + \"static/media/storm.4b969a4c.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.ebec5dbf.svg\";","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Moment from \"react-moment\";\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTime();\r\n    this.interval = setInterval(() => {\r\n      this.getTime();\r\n    }, 60000);\r\n  }\r\n  async getTime() {\r\n    const timeApiKey = process.env.REACT_APP_TIME_API_KEY;\r\n    const cityTime = `http://api.timezonedb.com/v2.1/get-time-zone?key=${timeApiKey}&format=json&by=position&lat=${this.props.lat}&lng=${this.props.lon}`;\r\n    \r\n     fetch(cityTime)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          time: data.formatted,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"weather-view\">\r\n        <Container fluid>\r\n          <Row>\r\n            <Col>\r\n              <div className=\"locationName\">\r\n                <h2 className=\"cityTitle\">\r\n                  {this.props.city}, {this.props.country}\r\n                </h2>\r\n                <h4 className=\"subtext\">\r\n                  <Moment format=\"dddd-D-MMMM\">{this.state.time}</Moment>\r\n                  <span> | </span>\r\n                  <Moment format=\"h:mm A\">{this.state.time}</Moment>\r\n                </h4>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={12}  md={6}>\r\n              <div className=\"weather-container\">\r\n                <div className=\"weather-icon\">\r\n                  {this.props.main === \"Mist\" ||\r\n                    this.props.main === \"Smoke\" ||\r\n                    this.props.main === \"Haze\" ||\r\n                    this.props.main === \"Dust\" ||\r\n                    this.props.main === \"Fog\" ||\r\n                    this.props.main === \"Sand\" ||\r\n                    this.props.main === \"Ash\" ||\r\n                    this.props.main === \"Squall\" ||\r\n                    this.props.main === \"Tornado\" ? (\r\n                      <img\r\n                        id=\"weather-icon\"\r\n                        src={require(`../Images/Icons/tornado.svg`)}\r\n                        alt={this.props.main}\r\n                      />\r\n                    ) : (\r\n                      <img\r\n                        id=\"weather-icon\"\r\n                        src={require(`../Images/Icons/${this.props.main.toLowerCase()}.svg`)}\r\n                        alt={this.props.main}\r\n                      />\r\n                    )}\r\n\r\n                </div>\r\n                \r\n                <div className=\"temp-info\">\r\n                  <h3 className=\"currentTemp\">{Math.floor(this.props.temperature)}&#176;</h3>\r\n                  <h4 className=\"currentDescription\">{this.props.description}</h4>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col xs={12}  md={6}>\r\n              <div className={`weather-info ${this.props.main}` + \"bg\"}>\r\n                <div className=\"current-info\">\r\n                  <h4 className=\"info\">{Math.floor(this.props.highestTemp)}&#176;</h4>\r\n                  <span className=\"infoName\">High</span>\r\n                </div>\r\n                <div className=\"current-info\">\r\n                  <h4 className=\"info\"> {this.props.wind}mph</h4>\r\n                  <span className=\"infoName\">Wind</span>\r\n                </div>\r\n                <div className=\"current-info\">\r\n                  <h4 className=\"info\">{this.props.sunrise}</h4>\r\n                  <span className=\"infoName\">Sunrise</span>\r\n                </div>\r\n                <div className=\"current-info\">\r\n                  <h4 className=\"info\">{Math.floor(this.props.lowestTemp)}&#176;</h4>\r\n                  <span className=\"infoName\">Low</span>\r\n                </div>\r\n                <div className=\"current-info\">\r\n                  <h4 className=\"info\">{this.props.humidity}%</h4>\r\n                  <span className=\"infoName\">Humid</span>\r\n                </div>\r\n                <div className=\"current-info\">\r\n                  <h4 className=\"info\">{this.props.sunset}</h4>\r\n                  <span className=\"infoName\">Sunset</span>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nclass WeatherForm extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"weatherForm\">\r\n        <Form onSubmit={this.props.loadWeather}>\r\n          <span className=\"searchImg\"><img id=\"search\"\r\n            src={require(`../Images/Icons/search.svg`)}\r\n            alt=\"search icon\"\r\n          /></span>\r\n          <Form.Control type=\"text\" name=\"city\" placeholder=\"Enter City\" />\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherForm;\r\n","import React from \"react\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n        <div className=\"navigation\">\r\n          <nav className=\"navbar\" id=\"navigation\">\r\n            <span className=\"navbar-brand mb-0 h1\">Weather App</span>\r\n          </nav>\r\n        </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react'\r\nimport Moment from \"react-moment\";\r\nclass Forecast extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"forecastData\">\r\n                {this.props.forecastData.map((item) => (\r\n                    <div key={item.dt} className={`weatherList ${this.props.theme}`+\"bg\"}>\r\n                        <div>\r\n                            <p className=\"subtext\">\r\n                                <Moment format=\"D/MM\">{item.dt_txt}</Moment>\r\n                                <br />\r\n                                <Moment format=\"H:mm \">{item.dt_txt}</Moment>\r\n                            </p>\r\n                            <img src={`http://openweathermap.org/img/wn/${item.weather[0].icon}.png`} id=\"weather-image\"  alt={item.weather[0].main}/><br/>\r\n                            <h3 className=\"forecastTemp\">{Math.floor(item.main.temp)}&#176;</h3> \r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast\r\n","import React, { Component } from \"react\";\r\nimport Weather from \"./Weather\";\r\nimport WeatherForm from \"./WeatherForm\";\r\nimport Navigation from \"./Navigation\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Forecast from \"./Forecast\";\r\n\r\nclass MainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      city: \"\",\r\n      country: \"\",\r\n      description: \"\",\r\n      main: \"Clear\",\r\n      temp: \"\",\r\n      highestTemp: \"\",\r\n      lowestTemp: \"\",\r\n      sunrise: \"\",\r\n      sunset: \"\",\r\n      clouds: \"\",\r\n      humidity: \"\",\r\n      wind: \"\",\r\n      lat: \"\",\r\n      lon: \"\",\r\n      icon:\"\",\r\n      load: false,\r\n      error: false,\r\n      forecastData:[],\r\n    };\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    const name = e.target.elements.city.value;\r\n    const weatherApiKey = process.env.REACT_APP_WEATHER_API_KEY;\r\n    console.log(weatherApiKey);\r\n    const weather = `https://api.openweathermap.org/data/2.5/weather?q=${name}&appid=${weatherApiKey}&units=metric`;\r\n    const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${name}&appid=${weatherApiKey}&units=metric`;\r\n    \r\n    e.preventDefault();\r\n    Promise.all([fetch(weather),fetch(forecast)])\r\n      .then(([res1, res2]) => {\r\n        if (res1.ok && res2.ok) {\r\n          return Promise.all([res1.json(), res2.json()]);\r\n        }\r\n        throw Error(res1.statusText, res2.statusText);\r\n      })\r\n      .then(([data1, data2]) => {\r\n        const sunset = new Date(data1.sys.sunset * 1000)\r\n          .toLocaleTimeString()\r\n          .slice(0, 5);\r\n        const sunrise = new Date(data1.sys.sunrise * 1000)\r\n          .toLocaleTimeString()\r\n          .slice(0, 5);\r\n        this.setState({\r\n          city: data1.name,\r\n          country: data1.sys.country,\r\n          description: data1.weather[0].description,\r\n          main: data1.weather[0].main,\r\n          icon:data1.weather[0].icon,\r\n          temp: data1.main.temp,\r\n          highestTemp: data1.main.temp_max,\r\n          lowestTemp: data1.main.temp_min,\r\n          sunrise,\r\n          sunset,\r\n          clouds: data1.clouds.all,\r\n          humidity: data1.main.humidity,\r\n          wind: data1.wind.speed,\r\n          lon: data1.coord.lon,\r\n          lat: data1.coord.lat,\r\n          load: true,\r\n          error: false,\r\n          forecastData:data2.list,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Sorry cannot find the city with the name\");\r\n        this.setState({\r\n          error: true,\r\n          load: true,\r\n          main: \"Clear\",\r\n        });\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <div className={`mainPage bg-img ${this.state.main}`} >\r\n              <Navigation />\r\n              <div className=\"weather\">\r\n              <WeatherForm loadWeather={this.getWeather} />\r\n              {this.state.load ? (\r\n                this.state.error ? (\r\n                  <div className=\"errorDisplay\">\r\n                    <h3 className=\"errorMsg\"> No matching cities found. Try searching with a valid city\r\n                    name!</h3>\r\n                  </div>\r\n                ) : (\r\n                    <div className=\"weather-data\">\r\n                      <Weather\r\n                        city={this.state.city}\r\n                        country={this.state.country}\r\n                        description={this.state.description}\r\n                        main={this.state.main}\r\n                        temperature={this.state.temp}\r\n                        highestTemp={this.state.highestTemp}\r\n                        lowestTemp={this.state.lowestTemp}\r\n                        sunrise={this.state.sunrise}\r\n                        sunset={this.state.sunset}\r\n                        clouds={this.state.clouds}\r\n                        humidity={this.state.humidity}\r\n                        wind={this.state.wind}\r\n                        lon={this.state.lon}\r\n                        lat={this.state.lat}\r\n                        error={this.state.error}\r\n                        icon={this.state.icon}\r\n                      />\r\n                      <Forecast forecastData={this.state.forecastData} theme={this.state.main}/>\r\n                    </div>\r\n                )\r\n              ) : (\r\n                  \r\n                this.state.error\r\n              )}\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Route, Switch, HashRouter as Router } from \"react-router-dom\";\r\n\r\nimport MainPage from \"./Components/MainPage\";\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Switch>\r\n            <Route\r\n              path='/'\r\n              exact\r\n              component={MainPage}\r\n            />\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}